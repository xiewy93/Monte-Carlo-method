#Combine all the loads data with its necessary weather data, format the datetime columns, and add new timeseries features

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import joblib

weather_dict = joblib.load('weather_dict.pkl')

#Format datetime columns
def format_datetime(weather, loads):
    #Format datetime columns:
    weather['date'] = weather.dateutc.apply(lambda x: pd.to_datetime(x).date())
    weather['timeest'] = weather.timeest.apply(lambda x: pd.to_datetime(x).time())
    foo = weather[['date', 'timeest']].astype(str)
    weather['timestamp'] = pd.to_datetime(foo['date'] + ' ' + foo['timeest'])
    loads['timestamp'] = loads.timestamp.apply(lambda x: pd.to_datetime(x))
    return weather, loads
    
#Add weather data to loads data
from sklearn.neighbors import NearestNeighbors

def find_nearest(group, match, groupname):
    nbrs = NearestNeighbors(1).fit(match['timestamp'].values[:, None])
    dist, ind = nbrs.kneighbors(group['timestamp'].values[:, None])

    group['nearesttime'] = match['timestamp'].values[ind.ravel()]
    return group
    
#Create features
#`dow`: day of the week (integer 0-6)
#`doy`: day of the year (integer 0-365)
#`day`: day of the month (integer 1-31)
#`woy`: week of the year (integer 1-52)
#`month`: month of the year (integer 1-12)
#`hour`: hour of the day (integer 0-23)
#`minute`: minute of the day (integer 0-1339)
#`t_m24`: load value from 24 hours earlier
#`t_m48`: load value from 48 hours earlier
#`tdif`: difference between load and t_m24


#datetime value of one day
pday = pd.Timedelta('1 day')

def get_prev_days(x, n_days):
    '''Take a datetime (x) in the 'full' dataframe, and outputs the load value n_days before that datetime'''
    try:
        lo = full[full.timestamp == x - n_days*pday].load.values[0]
    except:
        lo = full[full.timestamp == x].load.values[0]
    return lo

def add_time_features(df):
    full = df.copy()
    full['dow'] = full.timestamp.apply(lambda x: x.dayofweek)
    full['doy'] = full.timestamp.apply(lambda x: x.dayofyear)
    full['day'] = full.timestamp.apply(lambda x: x.day)
    full['month'] = full.timestamp.apply(lambda x: x.month)
    full['year'] = full.timestamp.apply(lambda x: x.year)
    full['hour'] = full.timestamp.apply(lambda x: x.hour)
    full['minute'] = full.timestamp.apply(lambda x: x.hour*60 + x.minute)

    full['t_m24'] = full.timestamp.apply(get_prev_days, args=(1,))
    full['t_m48'] = full.timestamp.apply(get_prev_days, args=(2,))
    full['tdif'] = full['load'] - full['t_m24']
    return full
Run this for every subset of NYS data

k = weather_dict.keys()

for region in k:
    
    place = weather_dict[region][1].lower().replace(' ','')
    airport = weather_dict[region][0]

    #load in the data
    loads = pd.read_csv('../data/nyiso/all/{0}.csv'.format(place))
    weather = pd.read_csv('../data/wunderground/{0}_all.csv'.format(airport))

    #remove loose headers
    weather = weather[weather.winddirection != 'winddirection']
    
    #format datetime columns
    weather, loads = format_datetime(weather, loads)

    #combine using KNN
    loads = find_nearest(loads,weather,'timestamp')
    full = loads.merge(weather, left_on='nearesttime', right_on='timestamp')

    #Remove and rename redundant columns 
    full = full[['timestamp_x', 'load', 'nearesttime', 'temperaturef', \
                'dewpointf', 'humidity', 'sealevelpressurein', 'winddirection', 'windspeedmph', \
                'precipitationin']].rename(columns={'timestamp_x': 'timestamp', 'nearesttime':'weathertime'})

    #Create features
    full = add_time_features(full)

    #Export to csv
    full.to_csv('full_{0}_features.csv'.format(place), index=False)

#datetime value of one day
phour = pd.Timedelta('1 hour')

def get_prev_hours(x, n_hours):
    '''Take a datetime (x) in the 'full' dataframe, and outputs the load value n_days before that datetime'''
    try:
        lo = full[full.timestamp == x - n_hours*phour].load.values[0]
    except:
        lo = full[full.timestamp == x].load.values[0]
    return lo

for region in k:
    place = weather_dict[region][1].lower().replace(' ','')
    airport = weather_dict[region][0]
    
    full = pd.read_csv('full_{0}_features.csv'.format(place))
    
    full['t_m1'] = full.timestamp.apply(get_prev_hours, args=(1,))
    
    full.to_csv('full_{0}_features.csv'.format(place), index=False)
    
    print "%s done" % place

